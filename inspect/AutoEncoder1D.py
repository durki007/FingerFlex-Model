# GENETARED BY NNDCT, DO NOT EDIT!

import torch
from torch import tensor
import pytorch_nndct as py_nndct

class AutoEncoder1D(py_nndct.nn.NndctQuantModel):
    def __init__(self):
        super(AutoEncoder1D, self).__init__()
        self.module_0 = py_nndct.nn.Input() #AutoEncoder1D::input_0(AutoEncoder1D::nndct_input_0)
        self.module_1 = py_nndct.nn.Module('nndct_shape') #AutoEncoder1D::AutoEncoder1D/3106(AutoEncoder1D::nndct_shape_1)
        self.module_2 = py_nndct.nn.Module('nndct_shape') #AutoEncoder1D::AutoEncoder1D/3115(AutoEncoder1D::nndct_shape_2)
        self.module_3 = py_nndct.nn.Module('nndct_reshape') #AutoEncoder1D::AutoEncoder1D/ret.3(AutoEncoder1D::nndct_reshape_3)
        self.module_4 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[spatial_reduce]/ret.5(AutoEncoder1D::nndct_unsqueeze_4)
        self.module_5 = py_nndct.nn.Module('aten::_convolution_mode') #AutoEncoder1D::AutoEncoder1D/ConvBlock[spatial_reduce]/Conv2d[conv1d]/ret.7(AutoEncoder1D::aten__convolution_mode_5)
        self.module_6 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[spatial_reduce]/ret.9(AutoEncoder1D::nndct_squeeze_6)
        self.module_7 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/ConvBlock[spatial_reduce]/ret.11(AutoEncoder1D::nndct_transpose_7)
        self.module_8 = py_nndct.nn.LayerNorm(normalized_shape=[32], eps=1e-05, elementwise_affine=True) #AutoEncoder1D::AutoEncoder1D/ConvBlock[spatial_reduce]/LayerNorm[norm]/ret.13(AutoEncoder1D::nndct_layer_norm_8)
        self.module_9 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/ConvBlock[spatial_reduce]/ret.15(AutoEncoder1D::nndct_transpose_9)
        self.module_10 = py_nndct.nn.GELU(approximate='none') #AutoEncoder1D::AutoEncoder1D/ConvBlock[spatial_reduce]/GELU[activation]/ret.17(AutoEncoder1D::nndct_GELU_10)
        self.module_11 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[spatial_reduce]/ret.19(AutoEncoder1D::nndct_unsqueeze_11)
        self.module_12 = py_nndct.nn.MaxPool2d(kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], ceil_mode=False) #AutoEncoder1D::AutoEncoder1D/ConvBlock[spatial_reduce]/MaxPool2d[downsample]/3181(AutoEncoder1D::nndct_maxpool_12)
        self.module_13 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[spatial_reduce]/ret.21(AutoEncoder1D::nndct_squeeze_13)
        self.module_14 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[0]/ret.23(AutoEncoder1D::nndct_unsqueeze_14)
        self.module_15 = py_nndct.nn.Module('aten::_convolution_mode') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[0]/Conv2d[conv1d]/ret.25(AutoEncoder1D::aten__convolution_mode_15)
        self.module_16 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[0]/ret.27(AutoEncoder1D::nndct_squeeze_16)
        self.module_17 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[0]/ret.29(AutoEncoder1D::nndct_transpose_17)
        self.module_18 = py_nndct.nn.LayerNorm(normalized_shape=[32], eps=1e-05, elementwise_affine=True) #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[0]/LayerNorm[norm]/ret.31(AutoEncoder1D::nndct_layer_norm_18)
        self.module_19 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[0]/ret.33(AutoEncoder1D::nndct_transpose_19)
        self.module_20 = py_nndct.nn.GELU(approximate='none') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[0]/GELU[activation]/ret.35(AutoEncoder1D::nndct_GELU_20)
        self.module_21 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[0]/ret.37(AutoEncoder1D::nndct_unsqueeze_21)
        self.module_22 = py_nndct.nn.MaxPool2d(kernel_size=[2, 1], stride=[2, 1], padding=[0, 0], dilation=[1, 1], ceil_mode=False) #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[0]/MaxPool2d[downsample]/3240(AutoEncoder1D::nndct_maxpool_22)
        self.module_23 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[0]/ret.39(AutoEncoder1D::nndct_squeeze_23)
        self.module_24 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[1]/ret.41(AutoEncoder1D::nndct_unsqueeze_24)
        self.module_25 = py_nndct.nn.Module('aten::_convolution_mode') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[1]/Conv2d[conv1d]/ret.43(AutoEncoder1D::aten__convolution_mode_25)
        self.module_26 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[1]/ret.45(AutoEncoder1D::nndct_squeeze_26)
        self.module_27 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[1]/ret.47(AutoEncoder1D::nndct_transpose_27)
        self.module_28 = py_nndct.nn.LayerNorm(normalized_shape=[64], eps=1e-05, elementwise_affine=True) #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[1]/LayerNorm[norm]/ret.49(AutoEncoder1D::nndct_layer_norm_28)
        self.module_29 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[1]/ret.51(AutoEncoder1D::nndct_transpose_29)
        self.module_30 = py_nndct.nn.GELU(approximate='none') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[1]/GELU[activation]/ret.53(AutoEncoder1D::nndct_GELU_30)
        self.module_31 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[1]/ret.55(AutoEncoder1D::nndct_unsqueeze_31)
        self.module_32 = py_nndct.nn.MaxPool2d(kernel_size=[2, 1], stride=[2, 1], padding=[0, 0], dilation=[1, 1], ceil_mode=False) #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[1]/MaxPool2d[downsample]/3299(AutoEncoder1D::nndct_maxpool_32)
        self.module_33 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[1]/ret.57(AutoEncoder1D::nndct_squeeze_33)
        self.module_34 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[2]/ret.59(AutoEncoder1D::nndct_unsqueeze_34)
        self.module_35 = py_nndct.nn.Module('aten::_convolution_mode') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[2]/Conv2d[conv1d]/ret.61(AutoEncoder1D::aten__convolution_mode_35)
        self.module_36 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[2]/ret.63(AutoEncoder1D::nndct_squeeze_36)
        self.module_37 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[2]/ret.65(AutoEncoder1D::nndct_transpose_37)
        self.module_38 = py_nndct.nn.LayerNorm(normalized_shape=[64], eps=1e-05, elementwise_affine=True) #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[2]/LayerNorm[norm]/ret.67(AutoEncoder1D::nndct_layer_norm_38)
        self.module_39 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[2]/ret.69(AutoEncoder1D::nndct_transpose_39)
        self.module_40 = py_nndct.nn.GELU(approximate='none') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[2]/GELU[activation]/ret.71(AutoEncoder1D::nndct_GELU_40)
        self.module_41 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[2]/ret.73(AutoEncoder1D::nndct_unsqueeze_41)
        self.module_42 = py_nndct.nn.MaxPool2d(kernel_size=[2, 1], stride=[2, 1], padding=[0, 0], dilation=[1, 1], ceil_mode=False) #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[2]/MaxPool2d[downsample]/3358(AutoEncoder1D::nndct_maxpool_42)
        self.module_43 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[2]/ret.75(AutoEncoder1D::nndct_squeeze_43)
        self.module_44 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[3]/ret.77(AutoEncoder1D::nndct_unsqueeze_44)
        self.module_45 = py_nndct.nn.Module('aten::_convolution_mode') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[3]/Conv2d[conv1d]/ret.79(AutoEncoder1D::aten__convolution_mode_45)
        self.module_46 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[3]/ret.81(AutoEncoder1D::nndct_squeeze_46)
        self.module_47 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[3]/ret.83(AutoEncoder1D::nndct_transpose_47)
        self.module_48 = py_nndct.nn.LayerNorm(normalized_shape=[128], eps=1e-05, elementwise_affine=True) #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[3]/LayerNorm[norm]/ret.85(AutoEncoder1D::nndct_layer_norm_48)
        self.module_49 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[3]/ret.87(AutoEncoder1D::nndct_transpose_49)
        self.module_50 = py_nndct.nn.GELU(approximate='none') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[3]/GELU[activation]/ret.89(AutoEncoder1D::nndct_GELU_50)
        self.module_51 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[3]/ret.91(AutoEncoder1D::nndct_unsqueeze_51)
        self.module_52 = py_nndct.nn.MaxPool2d(kernel_size=[2, 1], stride=[2, 1], padding=[0, 0], dilation=[1, 1], ceil_mode=False) #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[3]/MaxPool2d[downsample]/3417(AutoEncoder1D::nndct_maxpool_52)
        self.module_53 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[3]/ret.93(AutoEncoder1D::nndct_squeeze_53)
        self.module_54 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[4]/ret.95(AutoEncoder1D::nndct_unsqueeze_54)
        self.module_55 = py_nndct.nn.Module('aten::_convolution_mode') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[4]/Conv2d[conv1d]/ret.97(AutoEncoder1D::aten__convolution_mode_55)
        self.module_56 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[4]/ret.99(AutoEncoder1D::nndct_squeeze_56)
        self.module_57 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[4]/ret.101(AutoEncoder1D::nndct_transpose_57)
        self.module_58 = py_nndct.nn.LayerNorm(normalized_shape=[128], eps=1e-05, elementwise_affine=True) #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[4]/LayerNorm[norm]/ret.103(AutoEncoder1D::nndct_layer_norm_58)
        self.module_59 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[4]/ret.105(AutoEncoder1D::nndct_transpose_59)
        self.module_60 = py_nndct.nn.GELU(approximate='none') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[4]/GELU[activation]/ret.107(AutoEncoder1D::nndct_GELU_60)
        self.module_61 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[4]/ret.109(AutoEncoder1D::nndct_unsqueeze_61)
        self.module_62 = py_nndct.nn.MaxPool2d(kernel_size=[2, 1], stride=[2, 1], padding=[0, 0], dilation=[1, 1], ceil_mode=False) #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[4]/MaxPool2d[downsample]/3476(AutoEncoder1D::nndct_maxpool_62)
        self.module_63 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/ConvBlock[downsample_blocks]/ModuleList[4]/ret.111(AutoEncoder1D::nndct_squeeze_63)
        self.module_64 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[0]/ConvBlock[conv_block]/ret.113(AutoEncoder1D::nndct_unsqueeze_64)
        self.module_65 = py_nndct.nn.Module('aten::_convolution_mode') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[0]/ConvBlock[conv_block]/Conv2d[conv1d]/ret.115(AutoEncoder1D::aten__convolution_mode_65)
        self.module_66 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[0]/ConvBlock[conv_block]/ret.117(AutoEncoder1D::nndct_squeeze_66)
        self.module_67 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[0]/ConvBlock[conv_block]/ret.119(AutoEncoder1D::nndct_transpose_67)
        self.module_68 = py_nndct.nn.LayerNorm(normalized_shape=[128], eps=1e-05, elementwise_affine=True) #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[0]/ConvBlock[conv_block]/LayerNorm[norm]/ret.121(AutoEncoder1D::nndct_layer_norm_68)
        self.module_69 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[0]/ConvBlock[conv_block]/ret.123(AutoEncoder1D::nndct_transpose_69)
        self.module_70 = py_nndct.nn.GELU(approximate='none') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[0]/ConvBlock[conv_block]/GELU[activation]/ret.125(AutoEncoder1D::nndct_GELU_70)
        self.module_71 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[0]/ConvBlock[conv_block]/ret.127(AutoEncoder1D::nndct_unsqueeze_71)
        self.module_72 = py_nndct.nn.MaxPool2d(kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], ceil_mode=False) #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[0]/ConvBlock[conv_block]/MaxPool2d[downsample]/3535(AutoEncoder1D::nndct_maxpool_72)
        self.module_73 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[0]/ConvBlock[conv_block]/ret.129(AutoEncoder1D::nndct_squeeze_73)
        self.module_74 = py_nndct.nn.Module('aten::upsample_linear1d') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[0]/Upsample[upsample]/ret.131(AutoEncoder1D::aten_upsample_linear1d_74)
        self.module_75 = py_nndct.nn.Cat() #AutoEncoder1D::AutoEncoder1D/ret.133(AutoEncoder1D::nndct_concat_75)
        self.module_76 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[1]/ConvBlock[conv_block]/ret.135(AutoEncoder1D::nndct_unsqueeze_76)
        self.module_77 = py_nndct.nn.Module('aten::_convolution_mode') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[1]/ConvBlock[conv_block]/Conv2d[conv1d]/ret.137(AutoEncoder1D::aten__convolution_mode_77)
        self.module_78 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[1]/ConvBlock[conv_block]/ret.139(AutoEncoder1D::nndct_squeeze_78)
        self.module_79 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[1]/ConvBlock[conv_block]/ret.141(AutoEncoder1D::nndct_transpose_79)
        self.module_80 = py_nndct.nn.LayerNorm(normalized_shape=[64], eps=1e-05, elementwise_affine=True) #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[1]/ConvBlock[conv_block]/LayerNorm[norm]/ret.143(AutoEncoder1D::nndct_layer_norm_80)
        self.module_81 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[1]/ConvBlock[conv_block]/ret.145(AutoEncoder1D::nndct_transpose_81)
        self.module_82 = py_nndct.nn.GELU(approximate='none') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[1]/ConvBlock[conv_block]/GELU[activation]/ret.147(AutoEncoder1D::nndct_GELU_82)
        self.module_83 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[1]/ConvBlock[conv_block]/ret.149(AutoEncoder1D::nndct_unsqueeze_83)
        self.module_84 = py_nndct.nn.MaxPool2d(kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], ceil_mode=False) #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[1]/ConvBlock[conv_block]/MaxPool2d[downsample]/3604(AutoEncoder1D::nndct_maxpool_84)
        self.module_85 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[1]/ConvBlock[conv_block]/ret.151(AutoEncoder1D::nndct_squeeze_85)
        self.module_86 = py_nndct.nn.Module('aten::upsample_linear1d') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[1]/Upsample[upsample]/ret.153(AutoEncoder1D::aten_upsample_linear1d_86)
        self.module_87 = py_nndct.nn.Cat() #AutoEncoder1D::AutoEncoder1D/ret.155(AutoEncoder1D::nndct_concat_87)
        self.module_88 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[2]/ConvBlock[conv_block]/ret.157(AutoEncoder1D::nndct_unsqueeze_88)
        self.module_89 = py_nndct.nn.Module('aten::_convolution_mode') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[2]/ConvBlock[conv_block]/Conv2d[conv1d]/ret.159(AutoEncoder1D::aten__convolution_mode_89)
        self.module_90 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[2]/ConvBlock[conv_block]/ret.161(AutoEncoder1D::nndct_squeeze_90)
        self.module_91 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[2]/ConvBlock[conv_block]/ret.163(AutoEncoder1D::nndct_transpose_91)
        self.module_92 = py_nndct.nn.LayerNorm(normalized_shape=[64], eps=1e-05, elementwise_affine=True) #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[2]/ConvBlock[conv_block]/LayerNorm[norm]/ret.165(AutoEncoder1D::nndct_layer_norm_92)
        self.module_93 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[2]/ConvBlock[conv_block]/ret.167(AutoEncoder1D::nndct_transpose_93)
        self.module_94 = py_nndct.nn.GELU(approximate='none') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[2]/ConvBlock[conv_block]/GELU[activation]/ret.169(AutoEncoder1D::nndct_GELU_94)
        self.module_95 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[2]/ConvBlock[conv_block]/ret.171(AutoEncoder1D::nndct_unsqueeze_95)
        self.module_96 = py_nndct.nn.MaxPool2d(kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], ceil_mode=False) #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[2]/ConvBlock[conv_block]/MaxPool2d[downsample]/3673(AutoEncoder1D::nndct_maxpool_96)
        self.module_97 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[2]/ConvBlock[conv_block]/ret.173(AutoEncoder1D::nndct_squeeze_97)
        self.module_98 = py_nndct.nn.Module('aten::upsample_linear1d') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[2]/Upsample[upsample]/ret.175(AutoEncoder1D::aten_upsample_linear1d_98)
        self.module_99 = py_nndct.nn.Cat() #AutoEncoder1D::AutoEncoder1D/ret.177(AutoEncoder1D::nndct_concat_99)
        self.module_100 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[3]/ConvBlock[conv_block]/ret.179(AutoEncoder1D::nndct_unsqueeze_100)
        self.module_101 = py_nndct.nn.Module('aten::_convolution_mode') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[3]/ConvBlock[conv_block]/Conv2d[conv1d]/ret.181(AutoEncoder1D::aten__convolution_mode_101)
        self.module_102 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[3]/ConvBlock[conv_block]/ret.183(AutoEncoder1D::nndct_squeeze_102)
        self.module_103 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[3]/ConvBlock[conv_block]/ret.185(AutoEncoder1D::nndct_transpose_103)
        self.module_104 = py_nndct.nn.LayerNorm(normalized_shape=[32], eps=1e-05, elementwise_affine=True) #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[3]/ConvBlock[conv_block]/LayerNorm[norm]/ret.187(AutoEncoder1D::nndct_layer_norm_104)
        self.module_105 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[3]/ConvBlock[conv_block]/ret.189(AutoEncoder1D::nndct_transpose_105)
        self.module_106 = py_nndct.nn.GELU(approximate='none') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[3]/ConvBlock[conv_block]/GELU[activation]/ret.191(AutoEncoder1D::nndct_GELU_106)
        self.module_107 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[3]/ConvBlock[conv_block]/ret.193(AutoEncoder1D::nndct_unsqueeze_107)
        self.module_108 = py_nndct.nn.MaxPool2d(kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], ceil_mode=False) #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[3]/ConvBlock[conv_block]/MaxPool2d[downsample]/3742(AutoEncoder1D::nndct_maxpool_108)
        self.module_109 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[3]/ConvBlock[conv_block]/ret.195(AutoEncoder1D::nndct_squeeze_109)
        self.module_110 = py_nndct.nn.Module('aten::upsample_linear1d') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[3]/Upsample[upsample]/ret.197(AutoEncoder1D::aten_upsample_linear1d_110)
        self.module_111 = py_nndct.nn.Cat() #AutoEncoder1D::AutoEncoder1D/ret.199(AutoEncoder1D::nndct_concat_111)
        self.module_112 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[4]/ConvBlock[conv_block]/ret.201(AutoEncoder1D::nndct_unsqueeze_112)
        self.module_113 = py_nndct.nn.Module('aten::_convolution_mode') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[4]/ConvBlock[conv_block]/Conv2d[conv1d]/ret.203(AutoEncoder1D::aten__convolution_mode_113)
        self.module_114 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[4]/ConvBlock[conv_block]/ret.205(AutoEncoder1D::nndct_squeeze_114)
        self.module_115 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[4]/ConvBlock[conv_block]/ret.207(AutoEncoder1D::nndct_transpose_115)
        self.module_116 = py_nndct.nn.LayerNorm(normalized_shape=[32], eps=1e-05, elementwise_affine=True) #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[4]/ConvBlock[conv_block]/LayerNorm[norm]/ret.209(AutoEncoder1D::nndct_layer_norm_116)
        self.module_117 = py_nndct.nn.Module('nndct_transpose') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[4]/ConvBlock[conv_block]/ret.211(AutoEncoder1D::nndct_transpose_117)
        self.module_118 = py_nndct.nn.GELU(approximate='none') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[4]/ConvBlock[conv_block]/GELU[activation]/ret.213(AutoEncoder1D::nndct_GELU_118)
        self.module_119 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[4]/ConvBlock[conv_block]/ret.215(AutoEncoder1D::nndct_unsqueeze_119)
        self.module_120 = py_nndct.nn.MaxPool2d(kernel_size=[1, 1], stride=[1, 1], padding=[0, 0], dilation=[1, 1], ceil_mode=False) #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[4]/ConvBlock[conv_block]/MaxPool2d[downsample]/3811(AutoEncoder1D::nndct_maxpool_120)
        self.module_121 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[4]/ConvBlock[conv_block]/ret.217(AutoEncoder1D::nndct_squeeze_121)
        self.module_122 = py_nndct.nn.Module('aten::upsample_linear1d') #AutoEncoder1D::AutoEncoder1D/UpConvBlock[upsample_blocks]/ModuleList[4]/Upsample[upsample]/ret.219(AutoEncoder1D::aten_upsample_linear1d_122)
        self.module_123 = py_nndct.nn.Cat() #AutoEncoder1D::AutoEncoder1D/ret.221(AutoEncoder1D::nndct_concat_123)
        self.module_124 = py_nndct.nn.Module('nndct_unsqueeze') #AutoEncoder1D::AutoEncoder1D/ret.223(AutoEncoder1D::nndct_unsqueeze_124)
        self.module_125 = py_nndct.nn.Module('aten::_convolution_mode') #AutoEncoder1D::AutoEncoder1D/Conv2d[conv1x1_one]/ret.225(AutoEncoder1D::aten__convolution_mode_125)
        self.module_126 = py_nndct.nn.Module('nndct_squeeze') #AutoEncoder1D::AutoEncoder1D/ret(AutoEncoder1D::nndct_squeeze_126)
        self.spatial_reduce_conv1d_weight = torch.nn.parameter.Parameter(torch.Tensor(32, 2480, 3, 3))
        self.downsample_blocks_0_conv1d_weight = torch.nn.parameter.Parameter(torch.Tensor(32, 32, 7, 1))
        self.downsample_blocks_1_conv1d_weight = torch.nn.parameter.Parameter(torch.Tensor(64, 32, 7, 1))
        self.downsample_blocks_2_conv1d_weight = torch.nn.parameter.Parameter(torch.Tensor(64, 64, 5, 1))
        self.downsample_blocks_3_conv1d_weight = torch.nn.parameter.Parameter(torch.Tensor(128, 64, 5, 1))
        self.downsample_blocks_4_conv1d_weight = torch.nn.parameter.Parameter(torch.Tensor(128, 128, 5, 1))
        self.upsample_blocks_0_conv_block_conv1d_weight = torch.nn.parameter.Parameter(torch.Tensor(128, 128, 5, 1))
        self.upsample_blocks_1_conv_block_conv1d_weight = torch.nn.parameter.Parameter(torch.Tensor(64, 256, 5, 1))
        self.upsample_blocks_2_conv_block_conv1d_weight = torch.nn.parameter.Parameter(torch.Tensor(64, 128, 5, 1))
        self.upsample_blocks_3_conv_block_conv1d_weight = torch.nn.parameter.Parameter(torch.Tensor(32, 128, 7, 1))
        self.upsample_blocks_4_conv_block_conv1d_weight = torch.nn.parameter.Parameter(torch.Tensor(32, 64, 7, 1))
        self.conv1x1_one_weight = torch.nn.parameter.Parameter(torch.Tensor(5, 64, 1, 1))
        self.conv1x1_one_bias = torch.nn.parameter.Parameter(torch.Tensor(5,))

    @py_nndct.nn.forward_processor
    def forward(self, *args):
        output_module_0 = self.module_0(input=args[0])
        output_module_1 = self.module_1(input=output_module_0, dim=0)
        output_module_2 = self.module_2(input=output_module_0, dim=3)
        output_module_3 = self.module_3(input=output_module_0, shape=[output_module_1,-1,output_module_2])
        output_module_3 = self.module_4(input=output_module_3, dim=-1)
        output_module_3 = self.module_5({'input': output_module_3,'weight': self.spatial_reduce_conv1d_weight,'bias': None,'stride': [1,1],'padding': 'same','dilation': [1,1],'groups': 1})
        output_module_3 = self.module_6(input=output_module_3, dim=-1)
        output_module_3 = self.module_7(input=output_module_3, dim0=-2, dim1=-1)
        output_module_3 = self.module_8(output_module_3)
        output_module_3 = self.module_9(input=output_module_3, dim0=-2, dim1=-1)
        output_module_3 = self.module_10(output_module_3)
        output_module_3 = self.module_11(input=output_module_3, dim=-1)
        output_module_3 = self.module_12(output_module_3)
        output_module_3 = self.module_13(input=output_module_3, dim=-1)
        output_module_14 = self.module_14(input=output_module_3, dim=-1)
        output_module_14 = self.module_15({'input': output_module_14,'weight': self.downsample_blocks_0_conv1d_weight,'bias': None,'stride': [1,1],'padding': 'same','dilation': [1,1],'groups': 1})
        output_module_14 = self.module_16(input=output_module_14, dim=-1)
        output_module_14 = self.module_17(input=output_module_14, dim0=-2, dim1=-1)
        output_module_14 = self.module_18(output_module_14)
        output_module_14 = self.module_19(input=output_module_14, dim0=-2, dim1=-1)
        output_module_14 = self.module_20(output_module_14)
        output_module_14 = self.module_21(input=output_module_14, dim=-1)
        output_module_14 = self.module_22(output_module_14)
        output_module_14 = self.module_23(input=output_module_14, dim=-1)
        output_module_24 = self.module_24(input=output_module_14, dim=-1)
        output_module_24 = self.module_25({'input': output_module_24,'weight': self.downsample_blocks_1_conv1d_weight,'bias': None,'stride': [1,1],'padding': 'same','dilation': [1,1],'groups': 1})
        output_module_24 = self.module_26(input=output_module_24, dim=-1)
        output_module_24 = self.module_27(input=output_module_24, dim0=-2, dim1=-1)
        output_module_24 = self.module_28(output_module_24)
        output_module_24 = self.module_29(input=output_module_24, dim0=-2, dim1=-1)
        output_module_24 = self.module_30(output_module_24)
        output_module_24 = self.module_31(input=output_module_24, dim=-1)
        output_module_24 = self.module_32(output_module_24)
        output_module_24 = self.module_33(input=output_module_24, dim=-1)
        output_module_34 = self.module_34(input=output_module_24, dim=-1)
        output_module_34 = self.module_35({'input': output_module_34,'weight': self.downsample_blocks_2_conv1d_weight,'bias': None,'stride': [1,1],'padding': 'same','dilation': [1,1],'groups': 1})
        output_module_34 = self.module_36(input=output_module_34, dim=-1)
        output_module_34 = self.module_37(input=output_module_34, dim0=-2, dim1=-1)
        output_module_34 = self.module_38(output_module_34)
        output_module_34 = self.module_39(input=output_module_34, dim0=-2, dim1=-1)
        output_module_34 = self.module_40(output_module_34)
        output_module_34 = self.module_41(input=output_module_34, dim=-1)
        output_module_34 = self.module_42(output_module_34)
        output_module_34 = self.module_43(input=output_module_34, dim=-1)
        output_module_44 = self.module_44(input=output_module_34, dim=-1)
        output_module_44 = self.module_45({'input': output_module_44,'weight': self.downsample_blocks_3_conv1d_weight,'bias': None,'stride': [1,1],'padding': 'same','dilation': [1,1],'groups': 1})
        output_module_44 = self.module_46(input=output_module_44, dim=-1)
        output_module_44 = self.module_47(input=output_module_44, dim0=-2, dim1=-1)
        output_module_44 = self.module_48(output_module_44)
        output_module_44 = self.module_49(input=output_module_44, dim0=-2, dim1=-1)
        output_module_44 = self.module_50(output_module_44)
        output_module_44 = self.module_51(input=output_module_44, dim=-1)
        output_module_44 = self.module_52(output_module_44)
        output_module_44 = self.module_53(input=output_module_44, dim=-1)
        output_module_54 = self.module_54(input=output_module_44, dim=-1)
        output_module_54 = self.module_55({'input': output_module_54,'weight': self.downsample_blocks_4_conv1d_weight,'bias': None,'stride': [1,1],'padding': 'same','dilation': [1,1],'groups': 1})
        output_module_54 = self.module_56(input=output_module_54, dim=-1)
        output_module_54 = self.module_57(input=output_module_54, dim0=-2, dim1=-1)
        output_module_54 = self.module_58(output_module_54)
        output_module_54 = self.module_59(input=output_module_54, dim0=-2, dim1=-1)
        output_module_54 = self.module_60(output_module_54)
        output_module_54 = self.module_61(input=output_module_54, dim=-1)
        output_module_54 = self.module_62(output_module_54)
        output_module_54 = self.module_63(input=output_module_54, dim=-1)
        output_module_54 = self.module_64(input=output_module_54, dim=-1)
        output_module_54 = self.module_65({'input': output_module_54,'weight': self.upsample_blocks_0_conv_block_conv1d_weight,'bias': None,'stride': [1,1],'padding': 'same','dilation': [1,1],'groups': 1})
        output_module_54 = self.module_66(input=output_module_54, dim=-1)
        output_module_54 = self.module_67(input=output_module_54, dim0=-2, dim1=-1)
        output_module_54 = self.module_68(output_module_54)
        output_module_54 = self.module_69(input=output_module_54, dim0=-2, dim1=-1)
        output_module_54 = self.module_70(output_module_54)
        output_module_54 = self.module_71(input=output_module_54, dim=-1)
        output_module_54 = self.module_72(output_module_54)
        output_module_54 = self.module_73(input=output_module_54, dim=-1)
        output_module_54 = self.module_74({'input': output_module_54,'output_size': None,'align_corners': False,'scale_factors': [2.0]})
        output_module_54 = self.module_75(dim=1, tensors=[output_module_54,output_module_44])
        output_module_54 = self.module_76(input=output_module_54, dim=-1)
        output_module_54 = self.module_77({'input': output_module_54,'weight': self.upsample_blocks_1_conv_block_conv1d_weight,'bias': None,'stride': [1,1],'padding': 'same','dilation': [1,1],'groups': 1})
        output_module_54 = self.module_78(input=output_module_54, dim=-1)
        output_module_54 = self.module_79(input=output_module_54, dim0=-2, dim1=-1)
        output_module_54 = self.module_80(output_module_54)
        output_module_54 = self.module_81(input=output_module_54, dim0=-2, dim1=-1)
        output_module_54 = self.module_82(output_module_54)
        output_module_54 = self.module_83(input=output_module_54, dim=-1)
        output_module_54 = self.module_84(output_module_54)
        output_module_54 = self.module_85(input=output_module_54, dim=-1)
        output_module_54 = self.module_86({'input': output_module_54,'output_size': None,'align_corners': False,'scale_factors': [2.0]})
        output_module_54 = self.module_87(dim=1, tensors=[output_module_54,output_module_34])
        output_module_54 = self.module_88(input=output_module_54, dim=-1)
        output_module_54 = self.module_89({'input': output_module_54,'weight': self.upsample_blocks_2_conv_block_conv1d_weight,'bias': None,'stride': [1,1],'padding': 'same','dilation': [1,1],'groups': 1})
        output_module_54 = self.module_90(input=output_module_54, dim=-1)
        output_module_54 = self.module_91(input=output_module_54, dim0=-2, dim1=-1)
        output_module_54 = self.module_92(output_module_54)
        output_module_54 = self.module_93(input=output_module_54, dim0=-2, dim1=-1)
        output_module_54 = self.module_94(output_module_54)
        output_module_54 = self.module_95(input=output_module_54, dim=-1)
        output_module_54 = self.module_96(output_module_54)
        output_module_54 = self.module_97(input=output_module_54, dim=-1)
        output_module_54 = self.module_98({'input': output_module_54,'output_size': None,'align_corners': False,'scale_factors': [2.0]})
        output_module_54 = self.module_99(dim=1, tensors=[output_module_54,output_module_24])
        output_module_54 = self.module_100(input=output_module_54, dim=-1)
        output_module_54 = self.module_101({'input': output_module_54,'weight': self.upsample_blocks_3_conv_block_conv1d_weight,'bias': None,'stride': [1,1],'padding': 'same','dilation': [1,1],'groups': 1})
        output_module_54 = self.module_102(input=output_module_54, dim=-1)
        output_module_54 = self.module_103(input=output_module_54, dim0=-2, dim1=-1)
        output_module_54 = self.module_104(output_module_54)
        output_module_54 = self.module_105(input=output_module_54, dim0=-2, dim1=-1)
        output_module_54 = self.module_106(output_module_54)
        output_module_54 = self.module_107(input=output_module_54, dim=-1)
        output_module_54 = self.module_108(output_module_54)
        output_module_54 = self.module_109(input=output_module_54, dim=-1)
        output_module_54 = self.module_110({'input': output_module_54,'output_size': None,'align_corners': False,'scale_factors': [2.0]})
        output_module_54 = self.module_111(dim=1, tensors=[output_module_54,output_module_14])
        output_module_54 = self.module_112(input=output_module_54, dim=-1)
        output_module_54 = self.module_113({'input': output_module_54,'weight': self.upsample_blocks_4_conv_block_conv1d_weight,'bias': None,'stride': [1,1],'padding': 'same','dilation': [1,1],'groups': 1})
        output_module_54 = self.module_114(input=output_module_54, dim=-1)
        output_module_54 = self.module_115(input=output_module_54, dim0=-2, dim1=-1)
        output_module_54 = self.module_116(output_module_54)
        output_module_54 = self.module_117(input=output_module_54, dim0=-2, dim1=-1)
        output_module_54 = self.module_118(output_module_54)
        output_module_54 = self.module_119(input=output_module_54, dim=-1)
        output_module_54 = self.module_120(output_module_54)
        output_module_54 = self.module_121(input=output_module_54, dim=-1)
        output_module_54 = self.module_122({'input': output_module_54,'output_size': None,'align_corners': False,'scale_factors': [2.0]})
        output_module_54 = self.module_123(dim=1, tensors=[output_module_54,output_module_3])
        output_module_54 = self.module_124(input=output_module_54, dim=-1)
        output_module_54 = self.module_125({'input': output_module_54,'weight': self.conv1x1_one_weight,'bias': self.conv1x1_one_bias,'stride': [1,1],'padding': 'same','dilation': [1,1],'groups': 1})
        output_module_54 = self.module_126(input=output_module_54, dim=-1)
        return output_module_54
